<templateSet group="Atcoder_python">
  <template name="cum" value="from itertools import accumulate&#10;&#10;N = int(input())  # len(A)&#10;A = list(map(int, input().split()))&#10;&#10;B = [0] + A&#10;B = list(accumulate(B))  # 累積和を格納したリスト作成&#10;&#10;# この問題は長さが1-Nの連続部分の和の最大値を出せというものなので以下の通り&#10;for i in range(1, N + 1):&#10;    ans = max([B[k + i] - B[k] for k in range(N - i + 1)])&#10;    print(ans)&#10;" description="cumsum" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="dfs" value="from collections import deque&#10;&#10;&#10;def dfs(maze, visited, sh, sw):&#10;    stack = deque([[sh, sw]])&#10;    visited[sh][sw] = 1&#10;    while stack:&#10;        h, w = stack.pop() # 後入れ先出し&#10;        if maze[h][w] == &quot;g&quot;:&#10;            return &quot;Yes&quot;&#10;        for j, k in ([1, 0], [-1, 0], [0, 1], [0, -1]):&#10;            nh, nw = h + j, w + k&#10;            # nh と nw が街の範囲を超えてたら後の処理をスキップして別方向を模索&#10;            if nh &lt; 0 or nh &gt;= H or \&#10;                    nw &lt; 0 or nw &gt;= W:&#10;                continue&#10;            # 範囲内でしかも塀でなく、かつ未知の領域だったら行って印をつける&#10;            elif maze[nh][nw] != &quot;#&quot; and \&#10;                    visited[nh][nw] == 0:&#10;                visited[nh][nw] = 1&#10;                stack.append([nh, nw])&#10;&#10;    # たどり着かないままスタックが尽きたらNoを返す&#10;    return &quot;No&quot;&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    H, W = map(int, input().split())&#10;    maze = [input() for _ in range(H)]&#10;&#10;    for i in range(H):&#10;        # スタート地点があれば&#10;        if maze[i].find(&quot;s&quot;) != -1:&#10;            sh = i # shはスタート地点の行&#10;            sw = maze[i].find(&quot;s&quot;) # swはスタート地点の列&#10;            break&#10;&#10;    visited = [[0] * W for _ in range(H)]&#10;    print(dfs(maze, visited, sh, sw))" description="depth first search" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="dres" value="def resolve():&#10;    $END$&#10;    &#10;#resolve()&#10;" description="def resolve():" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="fr" value="for $i$ in range($N$):" description="for $i$ in range($N$):" toReformat="false" toShortenFQNames="true">
    <variable name="i" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="N" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="impres" value="from abc_prog$2$ import resolve" description="from abc_prog import resolve" toReformat="false" toShortenFQNames="true">
    <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ii" value="int(input())" description="int(input())" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="li" value="list(input())" description="list(input())" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="linp" value="[$i$ for i in range($N$)]" description="[int(input()) for i in range(N)]" toReformat="false" toShortenFQNames="true">
    <variable name="i" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="N" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="lmi" value="list(map(int,input().split()))&#10;" description="list(map(int,input().split()))" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="res" value="resolve()" description="res" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="si" value="str(input())" description="str(input())" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>